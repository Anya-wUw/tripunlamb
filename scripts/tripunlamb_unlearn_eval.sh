# #!/usr/bin/env bash
# set -euo pipefail

# # ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
# PROJECT_ROOT="/mnt/extremessd10tb/borisiuk/open-unlearning"
# cd "$PROJECT_ROOT"

# BASE_MODEL_PATH="/mnt/extremessd10tb/borisiuk/open-unlearning/saves/finetune/llama3.1-8b_full_3ep_ft_tripunlamb"
# MODEL_NAME="Llama-3.1-8B-Instruct"
# UNLEARN_SAVE_DIR="${PROJECT_ROOT}/saves/unlearn/tripunlamb_Llama8B"

# RUN_TAG="${RUN_TAG_OVERRIDE:-tripunlamb_pop1_fastret_$(date +%Y%m%d)}"
# BASE_EVAL_DIR="${PROJECT_ROOT}/saves/eval/${RUN_TAG}/tripunlamb_FT/${MODEL_NAME}"

# EVAL_CFG="eval/tripunlamb/default"
# RETAIN_SPLIT="fast_retain"
# GPU="${GPU:-0}"
# NUM_PROCESSES_EVAL=1

# MERGED_CACHE_DIR="${PROJECT_ROOT}/saves/unlearn/_merged_cache/${RUN_TAG}"
# mkdir -p "$MERGED_CACHE_DIR"

# # ===== –£–¢–ò–õ–ò–¢–´ =====
# is_full_model_dir () { [[ -f "$1/config.json" ]]; }
# is_peft_dir       () { [[ -f "$1/adapter_config.json" ]]; }

# # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π checkpoint, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω
# latest_valid_checkpoint () {
#   local base="$1"
#   local ckpt
#   ckpt="$(ls -d "$base"/checkpoint-* 2>/dev/null | sort -V | tail -n1 || true)"
#   if [[ -n "${ckpt}" ]] && { is_full_model_dir "$ckpt" || is_peft_dir "$ckpt"; }; then
#     echo "$ckpt"
#   fi
# }

# # –ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–µ–Ω—å –º–æ–¥–µ–ª–∏, –≥–¥–µ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç config.json –∏–ª–∏ adapter_config.json
# # 1) base; 2) latest checkpoint (–µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω); 3) —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ 2 —É—Ä–æ–≤–Ω–µ–π
# find_model_root () {
#   local base="${1%/}"  # —Å—Ä–µ–∑–∞—Ç—å —Ö–≤–æ—Å—Ç–æ–≤–æ–π /
#   # 1) –Ω–∞ —É—Ä–æ–≤–Ω–µ base
#   if is_full_model_dir "$base" || is_peft_dir "$base"; then
#     echo "$base"; return 0
#   fi
#   # 2) –≤–∞–ª–∏–¥–Ω—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç
#   local ckpt; ckpt="$(latest_valid_checkpoint "$base" || true)"
#   if [[ -n "${ckpt:-}" ]]; then
#     echo "$ckpt"; return 0
#   fi
#   # 3) –ø–æ–∏—Å–∫ –Ω–∞ –≥–ª—É–±–∏–Ω—É 2 (—É—á—Ç—ë–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã –ª–µ–∂–∞—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤)
#   local found
#   found="$(find "$base" -maxdepth 2 -type f \( -name 'config.json' -o -name 'adapter_config.json' \) 2>/dev/null | head -n1 || true)"
#   if [[ -n "${found:-}" ]]; then
#     echo "$(dirname "$found")"; return 0
#   fi
#   return 1
# }

# # –ï—Å–ª–∏ PEFT ‚Äî —Å–ª–∏–≤–∞–µ–º; –µ—Å–ª–∏ full ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
# merge_if_needed_and_get_path () {
#   local mp="$1"
#   if is_full_model_dir "$mp"; then
#     echo "$mp"; return 0
#   fi
#   if is_peft_dir "$mp"; then
#     local rel out
#     rel="$(echo "$mp" | sed 's|/|_|g')"
#     out="${MERGED_CACHE_DIR}/merged_${rel}"
#     if [[ -f "$out/config.json" ]]; then
#       echo "$out"; return 0
#     fi
#     echo "üîß Merging PEFT adapter with base model ‚Üí $out"
#     python3 -u "${PROJECT_ROOT}/tools/merge_peft.py" --base "$BASE_MODEL_PATH" --adapter "$mp" --out "$out"
#     echo "$out"; return 0
#   fi
#   return 1
# }

# eval_one () {
#   local label="$1" model_path="$2"
#   local out_dir="${BASE_EVAL_DIR}/${label}/on_${RETAIN_SPLIT}"
#   mkdir -p "$out_dir"

#   # –Ω–µ –µ–≤–∞–ª–∏–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
#   if [[ -f "${out_dir}/.success" ]]; then
#     echo "‚úÖ –£–∂–µ —É—Å–ø–µ—à–Ω–æ: ${label}"; return 0
#   fi
#   if [[ -s "${out_dir}/eval_results.txt" ]]; then
#     echo "üìÑ –£–∂–µ –µ—Å—Ç—å eval_results.txt (–Ω–µ –ø—É—Å—Ç–æ–π) ‚Üí –ø—Ä–æ–ø—É—Å–∫: ${label}"; return 0
#   fi

#   set +e
#   CUDA_VISIBLE_DEVICES="$GPU" accelerate launch --num_processes="${NUM_PROCESSES_EVAL}" src/eval.py \
#     --config-name=eval.yaml \
#     experiment="$EVAL_CFG" \
#     forget_split="$RETAIN_SPLIT" \
#     task_name="tripunlamb_${MODEL_NAME}_${label}" \
#     paths.output_dir="$out_dir" \
#     model.model_args.pretrained_model_name_or_path="$model_path" \
#     2>&1 | tee "${out_dir}/eval_results.txt"
#   local code=$?
#   set -e

#   if [[ $code -eq 0 ]] && grep -q "^Result for metric" "${out_dir}/eval_results.txt"; then
#     echo "OK" > "${out_dir}/.success"
#     rm -f "${out_dir}/.failed" 2>/dev/null || true
#   else
#     echo "FAIL (code=${code})" > "${out_dir}/.failed"
#   fi
# }

# # –Ø–≤–Ω—ã–µ ¬´–Ω–µ–º–æ–¥–µ–ª—å–Ω—ã–µ¬ª –∫–∞—Ç–∞–ª–æ–≥–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ä–∞–∑—É (–º–∞—Å–∫–∏ –¥–æ–ø–æ–ª–Ω—è–π –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
# should_skip_dirname () {
#   local name="$1"
#   [[ "$name" =~ ^all_logs_ ]] && return 0
#   return 1
# }

# # ===== –û–°–ù–û–í–ù–û–ô –ü–†–û–ì–û–ù =====
# echo "üîÅ Retrying failed/missing evals under: ${UNLEARN_SAVE_DIR}"
# shopt -s nullglob
# for dir in "${UNLEARN_SAVE_DIR}"/*/; do
#   dir="${dir%/}"
#   label="$(basename "$dir")"

#   if should_skip_dirname "$label"; then
#     echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫: ${label} ‚Äî —Å–ª—É–∂–µ–±–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥"; continue
#   fi

#   # –£–∂–µ –µ—Å—Ç—å —É—Å–ø–µ—Ö/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?
#   out_dir="${BASE_EVAL_DIR}/${label}/on_${RETAIN_SPLIT}"
#   if [[ -f "${out_dir}/.success" ]]; then
#     echo "‚úÖ –£–∂–µ —É—Å–ø–µ—à–Ω–æ: ${label}"; continue
#   fi
#   if [[ -s "${out_dir}/eval_results.txt" ]]; then
#     echo "‚úÖ –£–∂–µ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (eval_results.txt) ‚Äî –ø—Ä–æ–ø—É—Å–∫: ${label}"; continue
#   fi

#   # –ü–æ–∏—â–µ–º –∫–æ—Ä–µ–Ω—å –º–æ–¥–µ–ª–∏
#   if root="$(find_model_root "$dir")"; then
#     if eval_path="$(merge_if_needed_and_get_path "$root")"; then
#       echo "‚ñ∂Ô∏è  RETRY EVAL: ${label}"
#       echo "   ‚Ä¢ model root: $root"
#       echo "   ‚Ä¢ eval path : $eval_path"
#       eval_one "$label" "$eval_path"
#     else
#       echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫: ${label} ‚Äî –Ω–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å '$root', –Ω–æ –Ω–µ—Ç –Ω–∏ config.json, –Ω–∏ adapter_config.json –Ω–∞ –Ω—ë–º (–¥–ª—è merge)."
#     fi
#   else
#     echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫: ${label} ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ config.json, –Ω–∏ adapter_config.json (–¥–∞–∂–µ –≥–ª—É–±–∏–Ω–∞ 2). –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
#     ls -la "$dir" || true
#   fi
# done
# shopt -u nullglob

# echo "‚ú® Retry pass complete."

